/******************************************************************************/
/****        Generated by IBExpert 2024.1.22.1 23/05/2024 14:30:06         ****/
/******************************************************************************/

SET SQL DIALECT 3;

SET NAMES WIN1252;

SET CLIENTLIB 'C:\Windows\SysWOW64\fbclient.dll';

CREATE DATABASE '127.0.0.1/3050:C:\Projeto\SysPedidos\db\DB25.FDB'
USER 'SYSDBA' PASSWORD 'masterkey'
PAGE_SIZE 8192
DEFAULT CHARACTER SET WIN1252 COLLATION WIN_PTBR;



/******************************************************************************/
/****                              Generators                              ****/
/******************************************************************************/

CREATE GENERATOR INC_CO_EMPRESA;
SET GENERATOR INC_CO_EMPRESA TO 0;

CREATE GENERATOR INC_CO_IMAGEM;
SET GENERATOR INC_CO_IMAGEM TO 0;

CREATE GENERATOR INC_CO_ITEM;
SET GENERATOR INC_CO_ITEM TO 0;

CREATE GENERATOR INC_CO_PRODUTO;
SET GENERATOR INC_CO_PRODUTO TO 0;

CREATE GENERATOR INC_CO_USUARIO;
SET GENERATOR INC_CO_USUARIO TO 0;

CREATE GENERATOR INC_NU_PEDIDO;
SET GENERATOR INC_NU_PEDIDO TO 0;



/******************************************************************************/
/****                                Tables                                ****/
/******************************************************************************/



CREATE TABLE EMPRESA (
    CO_EMPRESA       INTEGER NOT NULL,
    NM_RAZAO_SOCIAL  VARCHAR(100) NOT NULL,
    NU_CNPJ          VARCHAR(14) NOT NULL,
    TX_EMAIL         VARCHAR(60),
    DT_CADASTRO      TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    DT_ALTERACAO     TIMESTAMP
);

CREATE TABLE PEDIDO (
    NU_PEDIDO     INTEGER NOT NULL,
    CO_EMPRESA    INTEGER NOT NULL,
    IN_SITUACAO   VARCHAR(1) DEFAULT 'G' NOT NULL,
    VL_PEDIDO     NUMERIC(12,2) DEFAULT 0.00 NOT NULL,
    DT_CADASTRO   TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    DT_ALTERACAO  TIMESTAMP
);

CREATE TABLE PEDIDO_ITENS (
    CO_ITEM        INTEGER NOT NULL,
    NU_PEDIDO      INTEGER NOT NULL,
    CO_PRODUTO     INTEGER NOT NULL,
    NU_QUANTIDADE  FLOAT DEFAULT 0 NOT NULL,
    VL_VENDA       NUMERIC(12,2) DEFAULT 0.00 NOT NULL,
    VL_TOTAL       NUMERIC(12,2) COMPUTED BY (VL_VENDA * NU_QUANTIDADE),
    DT_CADASTRO    TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
);

CREATE TABLE PRODUTO (
    CO_PRODUTO    INTEGER NOT NULL,
    TX_DESCRICAO  VARCHAR(60) NOT NULL,
    VL_VENDA      NUMERIC(12,2) DEFAULT 0.00 NOT NULL,
    NU_ESTOQUE    NUMERIC(6,2) DEFAULT 0 NOT NULL,
    DT_CADASTRO   TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    DT_ALTERACAO  TIMESTAMP
);

CREATE TABLE PRODUTO_IMAGEM (
    CO_IMAGEM    INTEGER NOT NULL,
    CO_PRODUTO   INTEGER NOT NULL,
    IM_PRODUTO   BLOB SUB_TYPE BINARY SEGMENT SIZE 80,
    TX_EXTENSAO  VARCHAR(5),
    DT_CADASTRO  TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
);

CREATE TABLE USUARIO (
    CO_USUARIO    INTEGER NOT NULL,
    NM_USUARIO    VARCHAR(60) NOT NULL,
    TX_LOGIN      VARCHAR(20) NOT NULL,
    TX_SENHA      VARCHAR(100) NOT NULL,
    IN_ATIVO      CHAR(1) DEFAULT 'A' NOT NULL,
    DT_CADASTRO   TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    DT_ALTERACAO  TIMESTAMP
);



/******************************************************************************/
/****                          Check constraints                           ****/
/******************************************************************************/

ALTER TABLE USUARIO ADD CHECK(IN_ATIVO IN ('A', 'I'));
ALTER TABLE PEDIDO ADD CHECK(IN_SITUACAO IN ('F', 'G', 'L'));


/******************************************************************************/
/****                             Primary keys                             ****/
/******************************************************************************/

ALTER TABLE EMPRESA ADD CONSTRAINT PK_EMPRESA PRIMARY KEY (CO_EMPRESA);
ALTER TABLE PEDIDO ADD CONSTRAINT PK_PEDIDO PRIMARY KEY (NU_PEDIDO);
ALTER TABLE PEDIDO_ITENS ADD CONSTRAINT PK_PEDIDO_ITENS PRIMARY KEY (CO_ITEM);
ALTER TABLE PRODUTO ADD CONSTRAINT PK_PRODUTO PRIMARY KEY (CO_PRODUTO);
ALTER TABLE PRODUTO_IMAGEM ADD CONSTRAINT PK_PRODUTO_IMAGEM PRIMARY KEY (CO_IMAGEM);
ALTER TABLE USUARIO ADD CONSTRAINT PK_USUARIO PRIMARY KEY (CO_USUARIO);


/******************************************************************************/
/****                             Foreign keys                             ****/
/******************************************************************************/

ALTER TABLE PEDIDO ADD CONSTRAINT FK_PEDIDO2 FOREIGN KEY (CO_EMPRESA) REFERENCES EMPRESA (CO_EMPRESA);
ALTER TABLE PEDIDO_ITENS ADD CONSTRAINT FK_PEDIDO_ITENS1 FOREIGN KEY (NU_PEDIDO) REFERENCES PEDIDO (NU_PEDIDO) ON DELETE CASCADE;
ALTER TABLE PEDIDO_ITENS ADD CONSTRAINT FK_PEDIDO_ITENS2 FOREIGN KEY (CO_PRODUTO) REFERENCES PRODUTO (CO_PRODUTO);
ALTER TABLE PRODUTO_IMAGEM ADD CONSTRAINT FK_IMAGEM_PRODUTO1 FOREIGN KEY (CO_PRODUTO) REFERENCES PRODUTO (CO_PRODUTO);


/******************************************************************************/
/****                               Indices                                ****/
/******************************************************************************/

CREATE UNIQUE INDEX UCNPJ ON EMPRESA (NU_CNPJ);
CREATE UNIQUE INDEX UPRODUTO ON PEDIDO_ITENS (NU_PEDIDO, CO_PRODUTO);


/******************************************************************************/
/****                               Triggers                               ****/
/******************************************************************************/



SET TERM ^ ;



/******************************************************************************/
/****                         Triggers for tables                          ****/
/******************************************************************************/



/* Trigger: PEDIDO_ITENS_AIUD0 */
CREATE TRIGGER PEDIDO_ITENS_AIUD0 FOR PEDIDO_ITENS
ACTIVE AFTER INSERT OR UPDATE OR DELETE POSITION 0
AS
begin
  IF ((INSERTING) or (UPDATING)) THEN
  BEGIN
    UPDATE PEDIDO
      SET PEDIDO.VL_PEDIDO = (SELECT SUM(PEDIDO_ITENS.VL_TOTAL) FROM PEDIDO_ITENS WHERE PEDIDO_ITENS.NU_PEDIDO = NEW.NU_PEDIDO)
      WHERE PEDIDO.NU_PEDIDO = NEW.NU_PEDIDO;
  END ELSE IF (DELETING) THEN
  BEGIN
    UPDATE PEDIDO
      SET PEDIDO.VL_PEDIDO = (SELECT SUM(PEDIDO_ITENS.VL_TOTAL) FROM PEDIDO_ITENS WHERE PEDIDO_ITENS.NU_PEDIDO = OLD.NU_PEDIDO)
      WHERE PEDIDO.NU_PEDIDO = OLD.NU_PEDIDO;
  END
end
^
SET TERM ; ^

